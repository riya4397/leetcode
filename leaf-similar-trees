/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    List<Integer> dfs (TreeNode root, List<Integer> l){
        Stack<TreeNode> stack = new Stack();
        
        stack.push(root);
        while(stack.size() > 0){
            TreeNode n = stack.peek();
            //System.out.print(stack);
            //System.out.println();
            
            if(n.left != null && n.left.val != -1){
                stack.push(n.left);
                continue;
            }
            else if(n.right != null && n.right.val != -1){
                stack.push(n.right);
                continue;
            }
            else if(n.left == null && n.right == null){
                TreeNode x = stack.pop();
                l.add(x.val);
                x.val = -1;
            }
            else if(n.left != null && n.right != null && n.left.val == -1 && n.right.val == -1){
                stack.pop().val = -1;
            }
            else if(n.left == null && n.right.val == -1){
                stack.pop().val = -1;
            }
            else if(n.right == null && n.left.val == -1){
                stack.pop().val = -1;
            }
        }
        return l;
    }
    
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        List<Integer> l1 = new LinkedList<>();
        l1 = dfs(root1, l1);
        List<Integer> l2 = new LinkedList<>();
        l2 = dfs(root2, l2);
        if(l1.size() != l2.size())return false;
        for(int i = 0; i < l1.size(); i++){
            if(l1.get(i) != l2.get(i))return false;
            //System.out.println(l1.get(i) + " " + l2.get(i));
        }
        return true;
    }
}
