class Solution {
    class Node{
        char alphabet;
        Node next[] = new Node[26];
        Node(char ch){
            this.alphabet = ch;
            for(int i = 0; i < 26; i++){
                this.next[i] = null;
            }
        }
    }
    
    public Node insert(String str){
        if(str.equals(null) || str.length() == 0) return null;
        Node r1 = new Node(str.charAt(0));
        Node root = r1;
        for(int i = 1; i < str.length(); i++){
            char ch = str.charAt(i);
            root.next[ch-'a'] = new Node(ch);
            root = root.next[ch-'a'];
        }
        return r1;
    }
    
    public Node compare(Node root, String str){
        if(root == null || str.equals(null) || str.length() == 0)return null;
        if(root.alphabet != str.charAt(0)){
                return null;
            }
        
        Node r1 = root;
        for(int i = 1; i < str.length(); i++){
            char ch = str.charAt(i);
            if(root.next[ch-'a'] != null){
                root = root.next[ch-'a'];
            }else{
                break;
            }
        }
        for(int j = 0; j < 26; j++){
                    root.next[j] = null;
                }
        return r1;
    }
    
    public String print(Node root){
        if(root == null)return "";
        String str = "";
        int c = 0;
        while(true){
            str += root.alphabet;
            c = 0;
            for(int i = 0; i < 26; i++){
                if(root.next[i] != null){
                    root = root.next[i];
                    c = 1;
                    break;
                }
            }
            if(c == 0)break;
        }
        return str;
    }

    public String longestCommonPrefix(String[] strs) {
        if(strs.length == 0)return "";
        Node root = insert(strs[0]); 
        
        Node t1 = root;
        for(int i = 1; i < strs.length; i++){
            //System.out.println("i = " + i + print(t1));
            t1 = compare(t1, strs[i]);
            //System.out.print("i = " + i + print(compare(t1, strs[i])));
            if(t1 == null)break;
        }
        return print(t1);
    }
}
