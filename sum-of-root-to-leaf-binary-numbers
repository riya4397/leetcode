/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public int toDecimal(String str){
        int num = 0;
        
        for(int i = str.length()-1, j = 0; i >= 0; i--, j++){
            int n = str.charAt(i)-'0';
            num += n * Math.pow(2, j);
        }
        return num;
    }
    
    public int dfs(TreeNode n, Stack<TreeNode> s){
        int num = 0;
        
        while(s.size() > 0){
            TreeNode temp = s.peek();
        
            if(temp.left != null && temp.left.val != -1){
                s.push(temp.left);
                continue;
            }
            else if(temp.right != null && temp.right.val != -1){
                s.push(temp.right);
                continue;
            }
            else if(temp.left == null && temp.right == null){
                String str = "";
                for(int i = 0; i < s.size(); i++){
                    str += s.get(i).val;
                }
                num += toDecimal(str);
                s.pop().val = -1;
                System.out.println(str + " " + toDecimal(str));
            } 
            else if (temp.left != null && temp.right != null && temp.left.val == -1 &&                                  temp.right.val == -1){
                s.pop().val = -1;
            }
            else if (temp.left == null && temp.right.val == -1){
                s.pop().val = -1;
            }
            else if (temp.right == null && temp.left.val == -1){
                s.pop().val = -1;
            }
            
        }
        return num;
    }
    
    public int sumRootToLeaf(TreeNode root) {
        if(root == null)return 0;
        Stack<TreeNode> s = new Stack<>();
        s.push(root);
        
        return dfs(root, s);
    }
}
