class MyStack {
    Queue<Integer> queue;
    /** Initialize your data structure here. */
    public MyStack() {
        queue = new LinkedList<>();
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        queue.add(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        Queue<Integer> temp = new LinkedList<>();
        
        Iterator itr = queue.iterator();
        
        for(int i = 0; i < queue.size()-1; i++){
            temp.add((int)(itr.next()));
        }
        int n = (int)(itr.next());
        queue = temp;
        return n;
    }
    
    /** Get the top element. */
    public int top() {
        Queue<Integer> temp = new LinkedList<>();
        
        Iterator itr = queue.iterator();
        
        for(int i = 0; i < queue.size()-1; i++){
            temp.add((int)(itr.next()));
        }
        int n = (int)(itr.next());
        temp.add(n);
        queue = temp;
        return n;
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        if(queue.size() > 0)return false;
        return true;
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
